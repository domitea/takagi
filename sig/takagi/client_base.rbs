module Takagi
  # Base class for Takagi clients, providing common functionality
  # for both UDP (CoAP) and TCP (CoAP over TCP) clients.
  #
  # This class defines the common interface and lifecycle management
  # that all Takagi clients should follow.
  class ClientBase
    @server_uri: untyped

    @timeout: untyped

    @callbacks: untyped

    @closed: untyped

    attr_reader server_uri: untyped

    attr_reader timeout: untyped

    attr_reader callbacks: untyped

    # Initializes the base client
    # @param server_uri [String] URL of the Takagi server
    # @param timeout [Integer] Maximum time to wait for a response
    def initialize: (untyped server_uri, ?timeout: ::Integer) -> void

    # Registers a callback for a given event
    # @param event [Symbol] Event name (e.g., :response)
    # @param callback [Proc] Callback function to handle the event
    def on: (untyped event) { (?) -> untyped } -> untyped

    # Sends a GET request
    # @param path [String] Resource path
    # @param callback [Proc] (optional) Callback function for processing the response
    def get: (untyped path) { (?) -> untyped } -> untyped

    # Sends a POST request
    # @param path [String] Resource path
    # @param payload [String] Data to send
    # @param callback [Proc] (optional) Callback function for processing the response
    def post: (untyped path, untyped payload) { (?) -> untyped } -> untyped

    # Sends a PUT request
    # @param path [String] Resource path
    # @param payload [String] Data to send
    # @param callback [Proc] (optional) Callback function for processing the response
    def put: (untyped path, untyped payload) { (?) -> untyped } -> untyped

    # Sends a DELETE request
    # @param path [String] Resource path
    # @param callback [Proc] (optional) Callback function for processing the response
    def delete: (untyped path) { (?) -> untyped } -> untyped

    # Sends a POST request with JSON payload (convenience method)
    # @param path [String] Resource path
    # @param data [Hash, Array] Data to encode as JSON
    # @param callback [Proc] (optional) Callback function for processing the response
    #
    # @example
    #   client.post_json('/sensors', {temperature: 25, humidity: 60})
    def post_json: (untyped path, untyped data) { (?) -> untyped } -> untyped

    # Sends a PUT request with JSON payload (convenience method)
    # @param path [String] Resource path
    # @param data [Hash, Array] Data to encode as JSON
    # @param callback [Proc] (optional) Callback function for processing the response
    #
    # @example
    #   client.put_json('/config', {enabled: true})
    def put_json: (untyped path, untyped data) { (?) -> untyped } -> untyped

    # Sends a GET request and automatically parses JSON response (convenience method)
    # @param path [String] Resource path
    # @yield [data] Yields the parsed JSON data
    # @return [Hash, Array, nil] Parsed JSON data if no block given
    #
    # @example With block
    #   client.get_json('/sensors') do |data|
    #     puts data['temperature']
    #   end
    #
    # @example Without block
    #   data = client.get_json('/sensors')
    def get_json: (untyped path) ?{ (?) -> untyped } -> untyped

    # Closes the client and releases any resources.
    # This should be called when the client is no longer needed to prevent
    # resource leaks in long-running processes.
    #
    # Subclasses should override this method to perform specific cleanup
    # and then call super.
    def close: () -> (nil | untyped)

    # Check if the client has been closed
    # @return [Boolean] true if the client is closed
    def closed?: () -> untyped

    # Creates a new client and yields it to the block, ensuring it's closed afterward.
    # This is the recommended way to use clients to prevent resource leaks.
    #
    # @param server_uri [String] URL of the Takagi server
    # @param timeout [Integer] Maximum time to wait for a response
    # @param options [Hash] Additional options passed to the subclass constructor
    # @yield [client] Gives the client to the block
    # @return [Object] The return value of the block
    #
    # @example
    #   Takagi::Client.open('coap://localhost:5683') do |client|
    #     client.get('/temperature')
    #   end
    def self.open: (untyped server_uri, ?timeout: ::Integer, **untyped options) { (?) -> untyped } -> untyped

    # Subclasses must implement this method to perform the actual request
    # @param method [Symbol] HTTP method (:get, :post, :put, :delete)
    # @param path [String] Resource path
    # @param payload [String] (optional) Data for POST/PUT requests
    # @param callback [Proc] (optional) Callback function for processing the response
    def request: (untyped _method, untyped _path, ?untyped? _payload) { (?) -> untyped } -> untyped

    # Subclasses can override this to perform specific cleanup
    # Called by #close before marking the client as closed
    def cleanup_resources: () -> nil

    # Delivers a response using the callback or registered callback
    # Wraps raw response data in a Response object for convenience
    # @param response_data [String] The response data to deliver
    # @param callback [Proc] Optional callback for this specific request
    def deliver_response: (untyped response_data) ?{ (?) -> untyped } -> untyped

    # Helper to parse JSON response from raw data
    # @param response_data [String] Raw response data
    # @return [Hash, Array, nil] Parsed JSON or nil
    def parse_json_response: (untyped response_data) -> untyped
  end
end
