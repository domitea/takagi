module Takagi
  class EventBus
    # EventBus Address Prefix Registry
    #
    # Defines which event address prefixes are distributed via CoAP
    # and which remain local-only.
    #
    # Extensible registry allows plugins to register custom prefixes
    # without modifying core code.
    #
    # @example Using predefined prefixes
    #   AddressPrefix.distributed?('sensor.temperature.room1')  # => true
    #   AddressPrefix.distributed?('system.startup')            # => false
    #
    # @example Registering a custom distributed prefix
    #   AddressPrefix.register_distributed('custom.', 'Custom Events')
    #
    # @example Registering a custom local prefix
    #   AddressPrefix.register_local('internal.', 'Internal Events')
    class AddressPrefix
      self.@distributed: untyped

      self.@local: untyped

      self.@mutex: untyped

      # Register a distributed prefix (events are published via CoAP)
      # @param prefix [String] Address prefix (e.g., 'sensor.')
      # @param description [String] Human-readable description
      # @param rfc [String, nil] Optional RFC reference
      def self.register_distributed: (untyped prefix, untyped description, ?rfc: untyped?) -> untyped

      # Register a local-only prefix (events stay in-process)
      # @param prefix [String] Address prefix (e.g., 'system.')
      # @param description [String] Human-readable description
      # @param rfc [String, nil] Optional RFC reference
      def self.register_local: (untyped prefix, untyped description, ?rfc: untyped?) -> untyped

      # Check if address matches a distributed prefix
      # @param address [String] Event address
      # @return [Boolean] true if distributed
      def self.distributed?: (untyped address) -> (false | untyped)

      # Check if address matches a local-only prefix
      # @param address [String] Event address
      # @return [Boolean] true if local-only
      def self.local?: (untyped address) -> untyped

      # Get all distributed prefixes
      # @return [Hash] Map of prefix => metadata
      def self.distributed_prefixes: () -> untyped

      # Get all local prefixes
      # @return [Hash] Map of prefix => metadata
      def self.local_prefixes: () -> untyped

      # Get all registered prefixes
      # @return [Hash] Combined map of all prefixes
      def self.all: () -> untyped

      # Get metadata for a specific prefix
      # @param prefix [String] The prefix to look up
      # @return [Hash, nil] Prefix metadata
      def self.metadata_for: (untyped prefix) -> untyped

      # Unregister a prefix (useful for testing/plugins)
      # @param prefix [String] The prefix to remove
      # @return [Boolean] true if was registered
      def self.unregister: (untyped prefix) -> untyped

      # Clear all registrations (useful for testing)
      def self.clear!: () -> untyped

      # Initialize default prefixes
      def self.initialize_defaults!: () -> untyped
    end
  end
end
