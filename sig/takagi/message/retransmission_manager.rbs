module Takagi
  module Message
    # Implements CoAP retransmission logic as per RFC 7252 Section 4.2
    #
    # For CON (Confirmable) messages, the client MUST retransmit the message
    # until it receives an ACK, RST, or the transmission times out.
    #
    # RFC 7252 ยง4.2: Retransmission uses exponential back-off with random factor
    # RFC 7252 ยง4.8: Default transmission parameters
    class RetransmissionManager
      @pending: untyped

      @mutex: untyped

      @logger: untyped

      @running: untyped

      @thread: untyped

      # RFC 7252 ยง4.8: Transmission parameters
      ACK_TIMEOUT: ::Float

      ACK_RANDOM_FACTOR: ::Float

      MAX_RETRANSMIT: 4

      # Pending transmission tracking
      PendingTransmission: untyped

      def initialize: (?logger: untyped?) -> void

      # Start the retransmission manager background thread
      def start: () -> (nil | untyped)

      # Stop the retransmission manager
      def stop: () -> untyped

      # Send a CON message with automatic retransmission
      # @param message_id [Integer] CoAP Message ID
      # @param message_data [String] Serialized message bytes
      # @param socket [UDPSocket] Socket to send on
      # @param host [String] Destination host
      # @param port [Integer] Destination port
      # @param callback [Proc] Called with response or timeout error
      def send_confirmable: (untyped message_id, untyped message_data, untyped socket, untyped host, untyped port) { (?) -> untyped } -> untyped

      # Handle incoming ACK or RST to cancel retransmission
      # @param message_id [Integer] CoAP Message ID
      # @param response_data [String] Response message data
      def handle_response: (untyped message_id, ?untyped? response_data) -> (nil | untyped)

      # Get statistics about pending transmissions
      def stats: () -> untyped

      private

      # Main retransmission loop
      def run_retransmission_loop: () -> untyped

      # Process timed out transmissions
      def process_timeouts: () -> untyped

      # Handle a transmission timeout
      def handle_timeout: (untyped transmission) -> untyped

      # Transmit a message
      def transmit: (untyped transmission) -> untyped

      # Calculate timeout with exponential backoff and random factor
      # RFC 7252 ยง4.2: timeout = ACK_TIMEOUT * (2 ** attempt) * random_factor
      # where random_factor is between 1.0 and ACK_RANDOM_FACTOR
      def calculate_timeout: (untyped attempt) -> untyped
    end
  end
end
