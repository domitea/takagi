module Takagi
  class Router
    # Handles dynamic route matching with parameter extraction.
    #
    # Extracted from Router to follow Single Responsibility Principle.
    # Manages matching URL patterns with dynamic segments (e.g., /users/:id)
    # and extracting parameters from matched routes.
    class RouteMatcher
      @logger: untyped

      # @param logger [Logger] Logger instance for debugging
      def initialize: (untyped logger) -> void

      # Matches dynamic routes that contain parameters (e.g., `/users/:id`)
      #
      # @param routes [Hash] Map of route keys to RouteEntry objects
      # @param method [String] HTTP method
      # @param path [String] Request path
      # @return [Array(RouteEntry, Hash), Array(nil, Hash)] Matched route entry and parameters, or [nil, {}]
      def match: (untyped routes, untyped method, untyped path) -> (untyped | ::Array[nil | ::Hash[untyped, untyped]])

      private

      # Locates a dynamic route by iterating through all routes
      #
      # @param routes [Hash] All registered routes
      # @param method [String] HTTP method to match
      # @param path [String] Request path to match
      # @return [Array(RouteEntry, Hash), nil] Matched entry and params, or nil
      def locate_dynamic_route: (untyped routes, untyped method, untyped path) -> (::Array[untyped] | nil)

      # Extracts dynamic parameters from a route pattern
      #
      # Compares route pattern (e.g., /users/:id) with actual path (e.g., /users/123)
      # and extracts parameter values.
      #
      # @param route_path [String] Route pattern with :param segments
      # @param path [String] Actual request path
      # @return [Hash, nil] Extracted parameters or nil if no match
      def extract_dynamic_params: (untyped route_path, untyped path) -> (nil | untyped)
    end
  end
end
